// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core_service.proto

package service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DouyinFeedRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DouyinFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DouyinFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DouyinFeedRequestMultiError, or nil if none found.
func (m *DouyinFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DouyinFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LatestTime

	// no validation rules for Token

	if len(errors) > 0 {
		return DouyinFeedRequestMultiError(errors)
	}

	return nil
}

// DouyinFeedRequestMultiError is an error wrapping multiple validation errors
// returned by DouyinFeedRequest.ValidateAll() if the designated constraints
// aren't met.
type DouyinFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DouyinFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DouyinFeedRequestMultiError) AllErrors() []error { return m }

// DouyinFeedRequestValidationError is the validation error returned by
// DouyinFeedRequest.Validate if the designated constraints aren't met.
type DouyinFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DouyinFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DouyinFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DouyinFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DouyinFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DouyinFeedRequestValidationError) ErrorName() string {
	return "DouyinFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DouyinFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouyinFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DouyinFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DouyinFeedRequestValidationError{}

// Validate checks the field values on DouyinFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DouyinFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DouyinFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DouyinFeedResponseMultiError, or nil if none found.
func (m *DouyinFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DouyinFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	for idx, item := range m.GetVideoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DouyinFeedResponseValidationError{
						field:  fmt.Sprintf("VideoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DouyinFeedResponseValidationError{
						field:  fmt.Sprintf("VideoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DouyinFeedResponseValidationError{
					field:  fmt.Sprintf("VideoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextTime

	if len(errors) > 0 {
		return DouyinFeedResponseMultiError(errors)
	}

	return nil
}

// DouyinFeedResponseMultiError is an error wrapping multiple validation errors
// returned by DouyinFeedResponse.ValidateAll() if the designated constraints
// aren't met.
type DouyinFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DouyinFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DouyinFeedResponseMultiError) AllErrors() []error { return m }

// DouyinFeedResponseValidationError is the validation error returned by
// DouyinFeedResponse.Validate if the designated constraints aren't met.
type DouyinFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DouyinFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DouyinFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DouyinFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DouyinFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DouyinFeedResponseValidationError) ErrorName() string {
	return "DouyinFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DouyinFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouyinFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DouyinFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DouyinFeedResponseValidationError{}

// Validate checks the field values on DouyinPublishActionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DouyinPublishActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DouyinPublishActionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DouyinPublishActionRequestMultiError, or nil if none found.
func (m *DouyinPublishActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DouyinPublishActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Data

	// no validation rules for Title

	if len(errors) > 0 {
		return DouyinPublishActionRequestMultiError(errors)
	}

	return nil
}

// DouyinPublishActionRequestMultiError is an error wrapping multiple
// validation errors returned by DouyinPublishActionRequest.ValidateAll() if
// the designated constraints aren't met.
type DouyinPublishActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DouyinPublishActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DouyinPublishActionRequestMultiError) AllErrors() []error { return m }

// DouyinPublishActionRequestValidationError is the validation error returned
// by DouyinPublishActionRequest.Validate if the designated constraints aren't met.
type DouyinPublishActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DouyinPublishActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DouyinPublishActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DouyinPublishActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DouyinPublishActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DouyinPublishActionRequestValidationError) ErrorName() string {
	return "DouyinPublishActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DouyinPublishActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouyinPublishActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DouyinPublishActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DouyinPublishActionRequestValidationError{}

// Validate checks the field values on DouyinPublishActionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DouyinPublishActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DouyinPublishActionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DouyinPublishActionResponseMultiError, or nil if none found.
func (m *DouyinPublishActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DouyinPublishActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	if len(errors) > 0 {
		return DouyinPublishActionResponseMultiError(errors)
	}

	return nil
}

// DouyinPublishActionResponseMultiError is an error wrapping multiple
// validation errors returned by DouyinPublishActionResponse.ValidateAll() if
// the designated constraints aren't met.
type DouyinPublishActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DouyinPublishActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DouyinPublishActionResponseMultiError) AllErrors() []error { return m }

// DouyinPublishActionResponseValidationError is the validation error returned
// by DouyinPublishActionResponse.Validate if the designated constraints
// aren't met.
type DouyinPublishActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DouyinPublishActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DouyinPublishActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DouyinPublishActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DouyinPublishActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DouyinPublishActionResponseValidationError) ErrorName() string {
	return "DouyinPublishActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DouyinPublishActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouyinPublishActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DouyinPublishActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DouyinPublishActionResponseValidationError{}

// Validate checks the field values on DouyinPublishListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DouyinPublishListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DouyinPublishListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DouyinPublishListRequestMultiError, or nil if none found.
func (m *DouyinPublishListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DouyinPublishListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Token

	if len(errors) > 0 {
		return DouyinPublishListRequestMultiError(errors)
	}

	return nil
}

// DouyinPublishListRequestMultiError is an error wrapping multiple validation
// errors returned by DouyinPublishListRequest.ValidateAll() if the designated
// constraints aren't met.
type DouyinPublishListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DouyinPublishListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DouyinPublishListRequestMultiError) AllErrors() []error { return m }

// DouyinPublishListRequestValidationError is the validation error returned by
// DouyinPublishListRequest.Validate if the designated constraints aren't met.
type DouyinPublishListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DouyinPublishListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DouyinPublishListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DouyinPublishListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DouyinPublishListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DouyinPublishListRequestValidationError) ErrorName() string {
	return "DouyinPublishListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DouyinPublishListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouyinPublishListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DouyinPublishListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DouyinPublishListRequestValidationError{}

// Validate checks the field values on DouyinPublishListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DouyinPublishListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DouyinPublishListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DouyinPublishListResponseMultiError, or nil if none found.
func (m *DouyinPublishListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DouyinPublishListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	for idx, item := range m.GetVideoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DouyinPublishListResponseValidationError{
						field:  fmt.Sprintf("VideoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DouyinPublishListResponseValidationError{
						field:  fmt.Sprintf("VideoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DouyinPublishListResponseValidationError{
					field:  fmt.Sprintf("VideoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DouyinPublishListResponseMultiError(errors)
	}

	return nil
}

// DouyinPublishListResponseMultiError is an error wrapping multiple validation
// errors returned by DouyinPublishListResponse.ValidateAll() if the
// designated constraints aren't met.
type DouyinPublishListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DouyinPublishListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DouyinPublishListResponseMultiError) AllErrors() []error { return m }

// DouyinPublishListResponseValidationError is the validation error returned by
// DouyinPublishListResponse.Validate if the designated constraints aren't met.
type DouyinPublishListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DouyinPublishListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DouyinPublishListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DouyinPublishListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DouyinPublishListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DouyinPublishListResponseValidationError) ErrorName() string {
	return "DouyinPublishListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DouyinPublishListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouyinPublishListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DouyinPublishListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DouyinPublishListResponseValidationError{}

// Validate checks the field values on DouyinUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DouyinUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DouyinUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DouyinUserRequestMultiError, or nil if none found.
func (m *DouyinUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DouyinUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Token

	if len(errors) > 0 {
		return DouyinUserRequestMultiError(errors)
	}

	return nil
}

// DouyinUserRequestMultiError is an error wrapping multiple validation errors
// returned by DouyinUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DouyinUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DouyinUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DouyinUserRequestMultiError) AllErrors() []error { return m }

// DouyinUserRequestValidationError is the validation error returned by
// DouyinUserRequest.Validate if the designated constraints aren't met.
type DouyinUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DouyinUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DouyinUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DouyinUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DouyinUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DouyinUserRequestValidationError) ErrorName() string {
	return "DouyinUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DouyinUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouyinUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DouyinUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DouyinUserRequestValidationError{}

// Validate checks the field values on DouyinUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DouyinUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DouyinUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DouyinUserResponseMultiError, or nil if none found.
func (m *DouyinUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DouyinUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DouyinUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DouyinUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DouyinUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DouyinUserResponseMultiError(errors)
	}

	return nil
}

// DouyinUserResponseMultiError is an error wrapping multiple validation errors
// returned by DouyinUserResponse.ValidateAll() if the designated constraints
// aren't met.
type DouyinUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DouyinUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DouyinUserResponseMultiError) AllErrors() []error { return m }

// DouyinUserResponseValidationError is the validation error returned by
// DouyinUserResponse.Validate if the designated constraints aren't met.
type DouyinUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DouyinUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DouyinUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DouyinUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DouyinUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DouyinUserResponseValidationError) ErrorName() string {
	return "DouyinUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DouyinUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouyinUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DouyinUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DouyinUserResponseValidationError{}

// Validate checks the field values on DouyinUserLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DouyinUserLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DouyinUserLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DouyinUserLoginRequestMultiError, or nil if none found.
func (m *DouyinUserLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DouyinUserLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return DouyinUserLoginRequestMultiError(errors)
	}

	return nil
}

// DouyinUserLoginRequestMultiError is an error wrapping multiple validation
// errors returned by DouyinUserLoginRequest.ValidateAll() if the designated
// constraints aren't met.
type DouyinUserLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DouyinUserLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DouyinUserLoginRequestMultiError) AllErrors() []error { return m }

// DouyinUserLoginRequestValidationError is the validation error returned by
// DouyinUserLoginRequest.Validate if the designated constraints aren't met.
type DouyinUserLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DouyinUserLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DouyinUserLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DouyinUserLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DouyinUserLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DouyinUserLoginRequestValidationError) ErrorName() string {
	return "DouyinUserLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DouyinUserLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouyinUserLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DouyinUserLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DouyinUserLoginRequestValidationError{}

// Validate checks the field values on DouyinUserLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DouyinUserLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DouyinUserLoginResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DouyinUserLoginResponseMultiError, or nil if none found.
func (m *DouyinUserLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DouyinUserLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	// no validation rules for UserId

	// no validation rules for Token

	if len(errors) > 0 {
		return DouyinUserLoginResponseMultiError(errors)
	}

	return nil
}

// DouyinUserLoginResponseMultiError is an error wrapping multiple validation
// errors returned by DouyinUserLoginResponse.ValidateAll() if the designated
// constraints aren't met.
type DouyinUserLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DouyinUserLoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DouyinUserLoginResponseMultiError) AllErrors() []error { return m }

// DouyinUserLoginResponseValidationError is the validation error returned by
// DouyinUserLoginResponse.Validate if the designated constraints aren't met.
type DouyinUserLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DouyinUserLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DouyinUserLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DouyinUserLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DouyinUserLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DouyinUserLoginResponseValidationError) ErrorName() string {
	return "DouyinUserLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DouyinUserLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouyinUserLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DouyinUserLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DouyinUserLoginResponseValidationError{}

// Validate checks the field values on DouyinUserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DouyinUserRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DouyinUserRegisterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DouyinUserRegisterRequestMultiError, or nil if none found.
func (m *DouyinUserRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DouyinUserRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 32 {
		err := DouyinUserRegisterRequestValidationError{
			field:  "Username",
			reason: "用户名为1-32个字符",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 32 {
		err := DouyinUserRegisterRequestValidationError{
			field:  "Password",
			reason: "密码为6-32个字符",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DouyinUserRegisterRequestMultiError(errors)
	}

	return nil
}

// DouyinUserRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by DouyinUserRegisterRequest.ValidateAll() if the
// designated constraints aren't met.
type DouyinUserRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DouyinUserRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DouyinUserRegisterRequestMultiError) AllErrors() []error { return m }

// DouyinUserRegisterRequestValidationError is the validation error returned by
// DouyinUserRegisterRequest.Validate if the designated constraints aren't met.
type DouyinUserRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DouyinUserRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DouyinUserRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DouyinUserRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DouyinUserRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DouyinUserRegisterRequestValidationError) ErrorName() string {
	return "DouyinUserRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DouyinUserRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouyinUserRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DouyinUserRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DouyinUserRegisterRequestValidationError{}

// Validate checks the field values on DouyinUserRegisterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DouyinUserRegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DouyinUserRegisterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DouyinUserRegisterResponseMultiError, or nil if none found.
func (m *DouyinUserRegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DouyinUserRegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	// no validation rules for UserId

	// no validation rules for Token

	if len(errors) > 0 {
		return DouyinUserRegisterResponseMultiError(errors)
	}

	return nil
}

// DouyinUserRegisterResponseMultiError is an error wrapping multiple
// validation errors returned by DouyinUserRegisterResponse.ValidateAll() if
// the designated constraints aren't met.
type DouyinUserRegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DouyinUserRegisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DouyinUserRegisterResponseMultiError) AllErrors() []error { return m }

// DouyinUserRegisterResponseValidationError is the validation error returned
// by DouyinUserRegisterResponse.Validate if the designated constraints aren't met.
type DouyinUserRegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DouyinUserRegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DouyinUserRegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DouyinUserRegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DouyinUserRegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DouyinUserRegisterResponseValidationError) ErrorName() string {
	return "DouyinUserRegisterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DouyinUserRegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouyinUserRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DouyinUserRegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DouyinUserRegisterResponseValidationError{}
